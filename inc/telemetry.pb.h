/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_TELEMETRY_PB_H_INCLUDED
#define PB_TELEMETRY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Point3D {
    double x;
    double y;
    double z;
} Point3D;

typedef struct _Temps {
    double x;
    double y;
    double z;
} Temps;

typedef struct _IndividualAxes {
    bool x;
    bool y;
    bool z;
} IndividualAxes;

typedef struct _Limits {
    bool left;
    bool right;
    bool up;
    bool down;
    bool in;
    bool out;
    bool probe;
} Limits;

typedef struct _CompoundAxes {
    bool x_y;
    bool z;
} CompoundAxes;

typedef struct _Telemetry {
    bool has_coords;
    Point3D coords;
    bool has_targets;
    Point3D targets;
    bool has_on_condition;
    CompoundAxes on_condition;
    bool has_probe;
    CompoundAxes probe;
    bool has_stalled;
    IndividualAxes stalled;
    bool has_limits;
    Limits limits;
    bool control_enabled;
    bool stall_control;
    int32_t brakes_mode;
    bool probe_protected;
    bool has_temps;
    Temps temps;
} Telemetry;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Point3D_init_default                     {0, 0, 0}
#define Temps_init_default                       {0, 0, 0}
#define IndividualAxes_init_default              {0, 0, 0}
#define Limits_init_default                      {0, 0, 0, 0, 0, 0, 0}
#define CompoundAxes_init_default                {0, 0}
#define Telemetry_init_default                   {false, Point3D_init_default, false, Point3D_init_default, false, CompoundAxes_init_default, false, CompoundAxes_init_default, false, IndividualAxes_init_default, false, Limits_init_default, 0, 0, 0, 0, false, Temps_init_default}
#define Point3D_init_zero                        {0, 0, 0}
#define Temps_init_zero                          {0, 0, 0}
#define IndividualAxes_init_zero                 {0, 0, 0}
#define Limits_init_zero                         {0, 0, 0, 0, 0, 0, 0}
#define CompoundAxes_init_zero                   {0, 0}
#define Telemetry_init_zero                      {false, Point3D_init_zero, false, Point3D_init_zero, false, CompoundAxes_init_zero, false, CompoundAxes_init_zero, false, IndividualAxes_init_zero, false, Limits_init_zero, 0, 0, 0, 0, false, Temps_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Point3D_x_tag                            1
#define Point3D_y_tag                            2
#define Point3D_z_tag                            3
#define Temps_x_tag                              1
#define Temps_y_tag                              2
#define Temps_z_tag                              3
#define IndividualAxes_x_tag                     1
#define IndividualAxes_y_tag                     2
#define IndividualAxes_z_tag                     3
#define Limits_left_tag                          1
#define Limits_right_tag                         2
#define Limits_up_tag                            3
#define Limits_down_tag                          4
#define Limits_in_tag                            5
#define Limits_out_tag                           6
#define Limits_probe_tag                         7
#define CompoundAxes_x_y_tag                     1
#define CompoundAxes_z_tag                       2
#define Telemetry_coords_tag                     1
#define Telemetry_targets_tag                    2
#define Telemetry_on_condition_tag               3
#define Telemetry_probe_tag                      4
#define Telemetry_stalled_tag                    5
#define Telemetry_limits_tag                     6
#define Telemetry_control_enabled_tag            7
#define Telemetry_stall_control_tag              8
#define Telemetry_brakes_mode_tag                9
#define Telemetry_probe_protected_tag            10
#define Telemetry_temps_tag                      11

/* Struct field encoding specification for nanopb */
#define Point3D_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   x,                 1) \
X(a, STATIC,   SINGULAR, DOUBLE,   y,                 2) \
X(a, STATIC,   SINGULAR, DOUBLE,   z,                 3)
#define Point3D_CALLBACK NULL
#define Point3D_DEFAULT NULL

#define Temps_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   x,                 1) \
X(a, STATIC,   SINGULAR, DOUBLE,   y,                 2) \
X(a, STATIC,   SINGULAR, DOUBLE,   z,                 3)
#define Temps_CALLBACK NULL
#define Temps_DEFAULT NULL

#define IndividualAxes_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     x,                 1) \
X(a, STATIC,   SINGULAR, BOOL,     y,                 2) \
X(a, STATIC,   SINGULAR, BOOL,     z,                 3)
#define IndividualAxes_CALLBACK NULL
#define IndividualAxes_DEFAULT NULL

#define Limits_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     left,              1) \
X(a, STATIC,   SINGULAR, BOOL,     right,             2) \
X(a, STATIC,   SINGULAR, BOOL,     up,                3) \
X(a, STATIC,   SINGULAR, BOOL,     down,              4) \
X(a, STATIC,   SINGULAR, BOOL,     in,                5) \
X(a, STATIC,   SINGULAR, BOOL,     out,               6) \
X(a, STATIC,   SINGULAR, BOOL,     probe,             7)
#define Limits_CALLBACK NULL
#define Limits_DEFAULT NULL

#define CompoundAxes_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     x_y,               1) \
X(a, STATIC,   SINGULAR, BOOL,     z,                 2)
#define CompoundAxes_CALLBACK NULL
#define CompoundAxes_DEFAULT NULL

#define Telemetry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  coords,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  targets,           2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  on_condition,      3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  probe,             4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stalled,           5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  limits,            6) \
X(a, STATIC,   SINGULAR, BOOL,     control_enabled,   7) \
X(a, STATIC,   SINGULAR, BOOL,     stall_control,     8) \
X(a, STATIC,   SINGULAR, INT32,    brakes_mode,       9) \
X(a, STATIC,   SINGULAR, BOOL,     probe_protected,  10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  temps,            11)
#define Telemetry_CALLBACK NULL
#define Telemetry_DEFAULT NULL
#define Telemetry_coords_MSGTYPE Point3D
#define Telemetry_targets_MSGTYPE Point3D
#define Telemetry_on_condition_MSGTYPE CompoundAxes
#define Telemetry_probe_MSGTYPE CompoundAxes
#define Telemetry_stalled_MSGTYPE IndividualAxes
#define Telemetry_limits_MSGTYPE Limits
#define Telemetry_temps_MSGTYPE Temps

extern const pb_msgdesc_t Point3D_msg;
extern const pb_msgdesc_t Temps_msg;
extern const pb_msgdesc_t IndividualAxes_msg;
extern const pb_msgdesc_t Limits_msg;
extern const pb_msgdesc_t CompoundAxes_msg;
extern const pb_msgdesc_t Telemetry_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Point3D_fields &Point3D_msg
#define Temps_fields &Temps_msg
#define IndividualAxes_fields &IndividualAxes_msg
#define Limits_fields &Limits_msg
#define CompoundAxes_fields &CompoundAxes_msg
#define Telemetry_fields &Telemetry_msg

/* Maximum encoded size of messages (where known) */
#define CompoundAxes_size                        4
#define IndividualAxes_size                      6
#define Limits_size                              14
#define Point3D_size                             27
#define TELEMETRY_PB_H_MAX_SIZE                  Telemetry_size
#define Telemetry_size                           140
#define Temps_size                               27

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
